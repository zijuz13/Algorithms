package com.huajun123;

import java.util.Arrays;
//八大排序算法合集,全部升序排序
public class AllSort2 {
    //冒泡排序法时间复杂度：O(n^2) 稳定
    public void bubbleSort(int[] arr){
        int temp;
        boolean flag;
       for(int i=1;i<arr.length;i++){
          for(int j=0;j<arr.length-i;j++){
              if(arr[j]>arr[j+1]){
                  flag=true;
                  temp=arr[j];
                  arr[j]=arr[j+1];
                  arr[j+1]=temp;
              }
          }
          if(!flag){
              break;
          }else{
              flag=false;
          }
       }
        this.print(arr);
    }
    //选择排序法时间复杂度:O(n^2) 不稳定
    public void selectSort(int[] arr){
     for(int i=1;i<arr.length;i++){
         int minIndex=i-1;
         int min=arr[i-1];
         for(int j=i;j<arr.length;j++){
             if(arr[j]<min){
                 minIndex=j;
                 min=arr[j];
             }
         }
         if(minIndex!=i-1){
             arr[minIndex]=arr[i-1];
             arr[i-1]=min;
         }
     }
        this.print(arr);
    }
    //快速排序法时间复杂度：O(nlogn),不稳定
    public void quickSort(int[] arr){
    this.quickSort(arr,0,arr.length-1);
        this.print(arr);
    }
    private void quickSort(int[] arr,int left,int right){
        if(left>right)return;
        int pivot=arr[(left+right)>>1];
        int l=left;
        int r=right;
        int temp;
        while(l<r){
            while(arr[l]<pivot)l++;
            while(arr[r]>pivot)r--;
            if(l==r){
                break;
            }
            temp=arr[l];
            arr[l]=arr[r];
            arr[r]=temp;
            if(arr[l]==pivot&&arr[r]==pivot){
                l++;
                r--;
            }
        }
        if(l==r){
            l++;
            r--;
        }
        this.quickSort(arr,left,r);
        this.quickSort(arr,l,right);
    }
    //插入排序法时间复杂度:O(n^2) 稳定
    public void insertSort(int[] arr){
    for(int i=1;i<arr.length;i++){
        this.insertElement(arr,arr[i],--i);
    }
        this.print(arr);
    }
    private void insertElement(int[] arr,int insertVal,int i){
        if(i<0||insertVal>=arr[i]){
            arr[i+1]=insertVal;
        }else{
            arr[i+1]=arr[i];
            this.insertElement(arr,insertVal,--i);
        }
    }
    //希尔排序交换法 O(nlogn) 不稳定
    public void shellSort(int[] arr){
      for(int gap=arr.length/2;gap>0;gap/=2){
          for(int j=gap;j<arr.length;j++){
              int k=j-gap;
              while(k>=0){
                  if(arr[k]>arr[k+gap]){
                      int temp=arr[k];
                      arr[k]=arr[k+gap];
                      arr[k+gap]=temp;
                  }
                  k-=gap;
              }
          }
      }
        this.print(arr);
    }
    //希尔排序插入法 O(nlogn) 不稳定
    public void shellSort1(int[] arr){
     for(int gap=arr.length/2;gap>0;gap/=2){
       for(int j=gap;j<arr.length;j++){
         this.insertElement(arr,gap,arr[j],j-gap);
       }
     }
        this.print(arr);
    }
    //递归使用插入法进行希尔排序
    private void insertElement(int[] arr,int gap,int insertVal,int i){
        if(i<0||insertVal>=arr[i]){
            arr[i+gap]=insertVal;
        }else{
            arr[i+gap]=arr[i];
            this.insertElement(arr,gap,insertVal,i-gap);
        }
    }
    //归并排序法时间复杂度：O(nlogn), 稳定(更准确的说是取决于算法) 分治法
    public void mergeSort(int[] arr){
     this.mergeSort(arr,0,arr.length-1,new int[arr.length]);
        this.print(arr);
    }
    //递归
    private void mergeSort(int[] arr,int left,int right,int[] temp){
        if(left==right)return;
        int mid=(left+right)>>1;
        this.mergeSort(arr,left,mid,temp);
        this.mergeSort(arr,mid+1,right,temp);
        this.merge(arr,left,mid,right,temp);
    }
    private void merge(int[] arr,int left,int mid,int right,int[] temp){
        int l=left;
        int r=mid+1;
        int index=0;
        while(l<=mid&&r<=right){
            //稳定性取决于这行代码，决定了归并排序是稳定排序
            if(arr[l]<=arr[r]){
                temp[index++]=arr[l++];
            }else{
                temp[index++]=arr[r++];
            }
        }
        while(l<=mid){
            temp[index++]=arr[l++];
        }
        while(r<=right){
            temp[index++]=arr[r++];
        }
        l=left;
        for(int i=0;i<index;i++){
        arr[l++]=arr[i];
        }
    }
    //基数排序，思想使用空间换时间,时间复杂度为,稳定
    public void radixSort(int[] arr){
        int maxLength = this.maxLength(arr);
        //用来排序的二维数组
        int[][] temp=new int[10][arr.length];
        //用来存储桶的数量
        int[] bucketCounts=new int[10];
        for(int i=1,n=1;i<=maxLength;i++,n*=10){
            for(int k=0;k<arr.length;k++){
                int index=arr[k]/n%10;
                temp[index][bucketCounts[index]++]=arr[k];
            }
            int index=0;
            for(int k=0;k<=9;k++){
                if(bucketCounts[k]!=0){
                    for(int h=0;h<bucketCounts[k];h++){
                        arr[index++]=temp[k][h];
                    }
                }
            }
            bucketCounts=new int[10];
        }
        this.print(arr);
    }
    //返回一个数组中最大值的所有位数总数
    private int maxLength(int[] arr){
        int max=arr[0];
        for(int a:arr){
            if(a>max){
                max=a;
            }
        }
        return (max+"").length();
    }
    public void heapSort(int[] arr){
     for(int i=arr.length/2-1;i>=0;i--){
         this.maxHeapify(arr,i,arr.length);
     }
     int temp=arr[0];
     arr[0]=arr[arr.length-1];
     arr[arr.length-1]=temp;
     for(int i=arr.length-1;i>0;i--){
         this.maxHeapify(arr,0,i);
         temp=arr[0];
         arr[0]=arr[i-1];
         arr[i-1]=temp;
     }
     this.print(arr);
    }
    //以i为顶点形成大顶堆
    private void maxHeapify(int[] arr,int i,int length){
        int temp=arr[i];
        for(int k=2*i+1;k<length;k=2*k+1){
            if(k+1<length&&arr[k+1]>arr[k]){
                k++;
            }
            if(arr[k]>temp){
                arr[i]=arr[k];
                i=k;
            }else{
                break;
            }
        }
        arr[i]=temp;
    }
    private void print(int[] arr){
        System.out.println(Arrays.toString(arr));
    }
}
