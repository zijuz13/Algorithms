Title: How to implement a fibonacci search?
Background:
Fibonacci Numbers are recursively defined as F(n) = F(n-1) + F(n-2), F(0) = 0, F(1) = 1. First few Fibinacci Numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, â€¦
Algorithm:
1.The idea is to first find the smallest Fibonacci number that is greater than or equal to the length of given array.
while(array.length>fb[k]-1){
k++;
}
2.Since the length of the original array may be less than that of the f[k] value, so we should extend the length of the original array to f[k], and fill the empty value with the last value of the original array 
        int[] temp= Arrays.copyOf(this.array,fb[k]);
        for(int i=high+1;i<temp.length;i++){
            temp[i]=array[high];
        }
3.Then we can use non-recursive method to find the specified value:
Equation: f[k]-1=(f[k-1]-1)+(f[k-2]-1)+1;
        while(low<=high){
            int mid=low+fb[k-1]-1; // it's much like the way we find values by binarySearch
            if(temp[mid]>element){
                high=mid-1;
                k--;
            }else if(temp[mid]<element){
                low=mid+1;
                k-=2;
            }else{
                if(mid<=high){
                    return mid;
                }else{
                    return high;
                }
            }
        }



